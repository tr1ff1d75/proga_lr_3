<resources>
    <string name="tv6">6.1 lazy() это функция, которая принимает лямбду и возвращает экземпляр класса, который служит делегатом для реализации ленивого свойства: первый вызов get() запускает лямбда-выражение, переданное lazy() в качестве аргумента, и запоминает полученное значение, а последующие вызовы просто возвращают вычисленное значение."</string>
    <string name="tv7">Монады — это подтип функторов, так как у них есть метод map, но они также реализуют другие методы, например, ap, of, chain.</string>
    <string name="tv4">4. Функции высокого порядка (high order function) - это функции, которые либо принимают функцию в качестве параметра, либо возвращают функцию, либо и то, и другое.</string>
    <string name="tv5">5.  Каррирование (currying) разбивает функцию многих переменных в цепочку нескольких функций одного аргумента. Частичное применение (partial application) позволяет зафиксировать некоторые параметры функции и получить функцию с меньшим количеством аргументов.
                            \n Kotlin не предоставляет такие изыски «из коробки», но он достаточно гибок, чтобы все это можно было элегантно реализовать в библиотеке funKtionale:
                            \n import org.funktionale.currying.*
                            \nval sum2ints = { x: Int, y: Int -> x + y }
                            \nval curried: (Int) -> (Int) -> Int = sum2ints.curried()
                            \nassertEquals(curried(2)(4), 6)
                            \n val add5 = curried(5)
                            \n assertEquals(add5(7), 12)</string>
    <string name="tv1">1. С помощью ключевого слова val определяется неизменяемая переменная (immutable variable). То есть мы можем присвоить значение такой переменной только один раз, но изменить его после первого присвоения мы уже не сможем.
                            \nval age: Int = 23</string>
</resources>
